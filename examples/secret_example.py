#!/usr/bin/env python3
# secret_example.py - Independent secret generator verification demo

import asyncio
import os

# Absolute imports for independence
from agent import Agent
from examples.secret_tool import SecretGeneratorTool


async def main():
    """Standalone secret generator verification demo."""
    print("\n" + "="*60)
    print("SECRET GENERATOR VERIFICATION DEMO")
    print("="*60)
    print("\nThis demo verifies that agents actually call the secret generator tool by:")
    print("1. Using a tool that generates unpredictable secret tokens")
    print("2. Checking tool state to confirm it was called")
    print("3. Verifying the unpredictable values appear in agent responses")
    
    # Check for OAuth token
    if not os.environ.get('CLAUDE_CODE_OAUTH_TOKEN'):
        print("\n‚ö†Ô∏è  WARNING: CLAUDE_CODE_OAUTH_TOKEN not set!")
        print("Please set your OAuth token: export CLAUDE_CODE_OAUTH_TOKEN='your-token'")
        return False
    
    try:
        # Start the secret generator tool
        secret_tool = SecretGeneratorTool().run(workers=2)
        
        # Create agent and connect to tool
        agent = Agent()
        agent.connect(secret_tool)
        
        print("\nüìù Test 1: Generate and retrieve a secret")
        print("-" * 40)
        
        # Ask agent to generate and tell us the secret
        result = await agent.run(
            "Please generate a new secret token using the generate_secret tool, "
            "then tell me exactly what the secret token is."
        )
        
        print(f"\n[Agent Response]:")
        print(f"Success: {result.get('success')}")
        response = result.get('response', '')
        print(f"Response: {response[:500]}...")
        
        # Verify the secret was actually generated by checking tool state
        actual_secret = secret_tool.state.get("current_secret")
        generation_count = secret_tool.state.get("generation_count", 0)
        
        print(f"\n‚úÖ Verification:")
        print(f"  - Tool was called: {generation_count > 0}")
        print(f"  - Actual secret from tool: {actual_secret}")
        print(f"  - Secret appears in response: {actual_secret in response if actual_secret else False}")
        
        # Test 2: Verify a specific token
        print("\nüìù Test 2: Verify a specific token")
        print("-" * 40)
        
        test_token = "test123"
        result = await agent.run(
            f"Please verify if the token '{test_token}' matches the current secret "
            "using the verify_secret tool. Tell me if it's valid or not."
        )
        
        print(f"\n[Agent Response]:")
        print(f"Response: {result.get('response', '')[:300]}...")
        
        # Final verification
        success = generation_count > 0 and actual_secret is not None
        
        print("\n" + "="*60)
        print("SECRET DEMO SUMMARY")
        print("="*60)
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"Secret Generator Verification: {status}")
        
        if success:
            print("\nüéâ Secret verification demo passed! The agent called the tool correctly.")
        else:
            print("\n‚ö†Ô∏è  Demo failed. The agent may not be calling the tool properly.")
        
        return success
        
    except RuntimeError as e:
        if "Cannot connect to Docker" in str(e):
            print(f"\n{e}")
            print("\nüí° After starting Docker, run this demo again.")
        else:
            raise
        return False
    except Exception as e:
        print(f"\n‚ùå Error during demo: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        print("\n" + "="*60)
        print("SECRET DEMO COMPLETED")
        print("="*60)


if __name__ == "__main__":
    # Run the standalone demo
    asyncio.run(main())